import { Identity } from "@semaphore-protocol/identity"
import getNextConfig from "next/config"
import { useRouter } from "next/router"
import { useCallback, useContext, useEffect, useState } from "react"
import Stepper from "../components/Stepper"
import LogsContext from "../context/LogsContext"

const { publicRuntimeConfig: env } = getNextConfig()
const userProof1 = "1eb53d11555e9b6e5e30170270c5f3dc2f2397af862e7e88f2ccfbcdf54f866a2fa8eb0754ef77c6345b3fd9c8cb96c9fea6803970251d0245c690cf53222071194f9ed042a292a546cb3883cf2a1837f9c38c5217aef397154a4ebc12d8d62017edbf6fd6e51fffca231b8c3cade71251360c297375c87eac1fd5ee6481d05f0b5939b95b38557709658c4ea5b9ea929d06f889fe9463c086d5281771d6af5523e20418c0b19df064a7bc59640a9b658a93535901aa2badbd33e00092b91a5b001d6e1198b4f62a0e587539de522459745377f10a9e1d76b4956707e43d68801562f8ce2676db14efaf45a582c82f45aa1171da218e83452e957aac874b20771c00f6073d328eaa5a436d3a4fda1fb943402aae65af1bd8260a3305f27ce6df088bbf35239da5462b8eb1d9343d1fc3fbd1270e1d3d2e4931f97091884b78da2b3ef3259246dabb7b44e33d91e9bd6b733534dcc66ce2199e033fe67e7a90c20a13f0e5a9d7c0f6b3679f3d0fcd01a23ef8069a391bed1da5657818ab82311b2c54fac665ceb644a6f931d57497c4eaa6d9a407d66c24b63d7cbca1f451406a2a70b789ed1ad3fd993eb3ee29208c7add4b115ab78d30e05df8df601bc271112551daa78f11050c20d454bd8111fb347b38b7b2125504abacc04fc7628369e81fb7d4dcd5bde35163f7d804b0182fb0d61dd77d175c5966a1a2b2336a70f0992b41adfa52f03eeee5cd7cb184bfc4f374ca4b77c49d0ee54cf8579bed687775007b8eb9c60b15ca64ef03d284183d9a5a14ca87fd082ca555a528264ac2d17c0999470507b3f0ae7b489b6e45f63dbc17625d1398caa3f9066d1a95d91671062b419409e860e3898f13bdb1fdadab34099955fe29028c41d2b9243df8fba1322a6511880b647a3fa58e38d9181f3dc3deb621f55283a56960d8a3b63def3d0a2fd2acf84ece29caa5795faf16e0a40663611d17200e497f678ea74f18b44db012990b62c1637c2ca09a920335596ea1399787fffdc5f49d002cec939dbe62132cbb6ad30d4d5b569d83fff2b5013b22a6bf9ae96da51192c3270f265925e4182c41037d22fd0d859ba7adf8a72dd1ee81ac38e7cb1ca227033bc0c02669e5001727bb0aa32d3b8d3c44a8c000d69b9e62e5d25010c199d6fc1d5f82f6e83819250353a069270a4596602528368b28744f18d68cc7e8fc5f98aaa1eeab56f82a2e2df0d9d8431bd655e8e091a0f4b9847780eca815ecda2e436989a7c33a0d5e0cbf52d5297f09192286d5c5bec49702948283070a9304ec81c3757864a8fa1f2f5cb035b5686711d025c0e09bc29ff506969352febea98347c54f7986065bd21a3f5aa4b16fd8b9c6c5b900bd013b060f59adf7a738847cb3efb89b99ce71301abce19dae675fbbae73123ddd42c20710206b331bac5f5368acef6a66bfa6d62aa4ad456214e5536b8fa0b7ee1d3c18d94c1afeca5b7a1557ceddd2e27e1f7420e44b1ab5592e1bdc68990744900e8574a3e696e93aafa5e538d4ba2f7eab6506dd54195d29e39b916afe0adc082c7b8079a5217d5ed15e8e46d0506d0ffc991fa07c0365412d0f5988e6e07f32e87d98fd9d8546d80145b01ea1a18b1db908257cc53d9f4e1feb5de9c55a73cdebf560f2ba4967641f95488cd5581384d5c115bc55e4c4c67661bb0b3c870d6cfccd47d48d422d6f9d4bbd55ce6280d06b0b02a4ae595a1bca92efafeb616394f19e3df18b0cdff0b5a1d0a5949d79cb219a03e0f81ef2bee53381a2813303deebe6cb07977c7709fd1daee50a7c278b01fe2597ed85030c3e1d29025b9322f39fdd35798e2fcb01c81c4d8bb220c807d75525ab886f221f6d743ce8132feb5333484c31d5b6e58abb3c68dfe9a1684710df031980d7335b0664f6be3102c89a28290512d4120986ca51fe10cb739a7dc8210d195ca3ee35a04fd7a2d749dc4f1464b56d4c5b075ae8bd77c29dcb5a83eb6818132aadfc3598095e00eb44068b4eb52160028c39c3d74fbc870977a0d6de6211cf56345e6440c9dff822b0f7cad22d67a6d0492ab92892233fac6fe6e5c9cf2126032d4ce5623ba025300d70f7d956317d3b0b33c19aed86294951b117302e0e01d6f368ecec102b59a86be53efca8bffdd3744b11a050cab8617f56adeb510b35a0177db2dbbbd9092bd95672bd14be1d7661aad4e7df9e874a17835ab3621289e7697be60f13f8ea09609681e39d876c5ae1d3eb2529d62ada7a3e88fc9f0999b911e357de3a9c4be12c35ec61a49cc2c0ccc28cf8ebde50be50ad2cca110b7fe3c62bdc65eaaf46d145e1e172726a1de6d3bcc2a78da18a8ef84b3bf8e7109f75b032b8c3fb8b7503a6c6245f067d4909291a4a192b54756e1841cb64e322530b39f8f24bb299b4571fc8b436f011773cb05021015dcc6000d61632e2920ad9ebcfc96c0e134fce655d7f1dffa5921cbdf5046bf8ff9bd1b638b8dee8cd02fe581a21faaf6a701bb063814c53cf141a07defab086cf622fa042d9c3a8c3012d682f19c97d9ceebbb391153ad3d5cde689b8850d5bb7b9ed429ce5dc554620e76e0e867ccf296c47a0807bb7985784ffef1e13a8f7aeac9d2f7eca5461f40046ae5e2f0fdc3b682273f646ef4314e8e2e0a64d63e4c9e2d8a91ac453a38e00b1a231717ac0e0d6343c051ad2ffe362bfbc85f50cc337f9cc3025448dff560607cd72a9271b3cab2ac73ede814ec1faab6f0282264fedad782ba1419dc28b119cd2f340f6444d300002d4e4dc758359b5aacafb8f7a2bec1ee4287dd2421b1bf97b4482ece6c791c84529cef95916a6163306398f4c2ae0f9a094912bfaab289ab6113d3721a2b00572fa07ea324ea45d60bf1aeed46ca17540c0d4c957b31d62f1cd85144c8a459a5a8c26d12f3f580c6dd0a30440f43ba8fb8d2731c92e055064adec86b94e3628b746c53364361ff1fbbc715c400841832fdf27c1e2bd1a69c5383f397502e8d63994eff45d4fce5575a63c561f8bba3e04d8147eada2" // user proof
const root1 = ["0x0000000000000000000000000000000000000000000000000000000000000027", "0x00000000000000000000000000000000000000000000000000000000000000b2", "0x0000000000000000000000000000000000000000000000000000000000000012", "0x0000000000000000000000000000000000000000000000000000000000000032", "0x000000000000000000000000000000000000000000000000000000000000007f", "0x00000000000000000000000000000000000000000000000000000000000000f0", "0x0000000000000000000000000000000000000000000000000000000000000054", "0x00000000000000000000000000000000000000000000000000000000000000a8", "0x00000000000000000000000000000000000000000000000000000000000000ce", "0x0000000000000000000000000000000000000000000000000000000000000004", "0x0000000000000000000000000000000000000000000000000000000000000072", "0x00000000000000000000000000000000000000000000000000000000000000b8", "0x00000000000000000000000000000000000000000000000000000000000000d1", "0x0000000000000000000000000000000000000000000000000000000000000049", "0x0000000000000000000000000000000000000000000000000000000000000007", "0x0000000000000000000000000000000000000000000000000000000000000046", "0x00000000000000000000000000000000000000000000000000000000000000d5", "0x00000000000000000000000000000000000000000000000000000000000000ce", "0x00000000000000000000000000000000000000000000000000000000000000f4", "0x0000000000000000000000000000000000000000000000000000000000000079", "0x0000000000000000000000000000000000000000000000000000000000000079", "0x0000000000000000000000000000000000000000000000000000000000000006", "0x0000000000000000000000000000000000000000000000000000000000000083", "0x0000000000000000000000000000000000000000000000000000000000000026", "0x0000000000000000000000000000000000000000000000000000000000000079", "0x0000000000000000000000000000000000000000000000000000000000000054", "0x000000000000000000000000000000000000000000000000000000000000006f", "0x00000000000000000000000000000000000000000000000000000000000000d9", "0x00000000000000000000000000000000000000000000000000000000000000f0", "0x000000000000000000000000000000000000000000000000000000000000003a", "0x0000000000000000000000000000000000000000000000000000000000000026", "0x0000000000000000000000000000000000000000000000000000000000000072"]
const  spend_limit1 = "0x000000000000000000000000000000000000000000000000000000000000003c"

interface Proof {
    proof: string,
    root: string[],
    spendLimit: string
}
export default function FundsPage() {
    const router = useRouter()
    const { setLogs } = useContext(LogsContext)
    const [_identity, setIdentity] = useState<Identity>()
    const [spendingLimit, setSpendingLimit] = useState<number>()
    const [userProof, setUserProof] = useState<Proof>()
    const [showProof, setShowProof] = useState(false)
    const [increaseSpendInput, setShowIncreaseSpendInput] = useState(false)
    const [rawTx, setRawTx] = useState(false)
    useEffect(() => {
        const identityString = localStorage.getItem("identity")

        if (!identityString) {
            router.push("/")
            return
        }

        setIdentity(new Identity(identityString))
    }, [])

    useEffect(() => {
        setLogs(`Fund me plz!`)
        // eslint-disable-next-line radix
        setSpendingLimit(parseInt(spend_limit1))
    }, [spend_limit1])

    const generateProof = useCallback(async () => {
        setUserProof({
            "proof": userProof1,
            "root": root1,
            "spendLimit": spend_limit1
        })
    }, [userProof1])

    const shouldShowProof = useCallback(async () => {
        setShowProof(true)
    }, [setShowProof])

    return (
        <>
            <h2>Fund Relay Bot with IRON</h2>

            <p>
                In order to use relay bot please fund the bot with Iron. The spending limit will be equivalent to the total funds supplied to the bot.
            </p>

            <div className="divider"></div>

            <div>
                Current spending limit: {spendingLimit}
            </div>
            <div>
                <button className="button" onClick={generateProof}>
                    Generate Proofs
                </button>
            </div>

            {userProof?.proof? <div>
                <button className="button" onClick={shouldShowProof}>
                    Show Proofs
                </button>
            </div>:<div></div>}

            {showProof?<div>
                <div>Public Inputs:</div>
                <div>
                    Spend Limit:
                </div>
                <div className="box box-text">
                {userProof?.spendLimit}
                </div>
                <div>
                    Root:
                </div>
                <p className="proof-box proof-box-text">
                   [{userProof?.root.map((i, idx) => (idx===0)?`"${i}"`:`,"${i}"`)}]
                </p>
                <div>
                    Proof:
                </div>
                <div className="proof-box proof-box-text">
                    {userProof?.proof}
                </div>
            </div>:<div></div>}

            <div>
                <button className="button" onClick={() => {setShowIncreaseSpendInput(true)}}>
                    Increase spending limit
                </button>
            </div>

            {increaseSpendInput?<div>
                <div>
                    $IRON deposit address: {env.RELAY_BOT_IRONFISH_ADDRESS}
                </div>
                <div>
                    Enter transfer amount:
                    <input className="box box-text"></input>
                </div>
                <button className="button" onClick={() => setRawTx(true)}>
                    Create raw transaction
                </button>
                {rawTx?<div>
                <div>
                    Copy and broadcast this raw transaction:
                </div>
                <div className="proof-box proof-box-text">
                    0201000000000000000100000000000000a8b5ef47d432eba38ec4e3560da8f7af5db2cd4bbb30bcc9cd16aa574ced0fc4d451f33a2f14f92735e562dc658a5639279ddca3d5079a6d1242b2a588a9cbf44c00e1f50500000000aca968bfbac93ef7fa321b3e2f93a8ec48099a91177a28dd9e054db83c1b6202000000000000000000000000000000000000000000000000000000000000000001ad7aa5a5e8a1e49ed5764179f6950fed680dae74c5fc070dec2e391cc02e9530a8020000000000201ac577f36dab21b0289d3569cadd3f678c5b73d241d986201fdca7a029668d0d20000000000000000120ea3149d833412a45d5d9657c586827f4fb2981c8c924e7a13a4c8e3bccc0724d0020d31a51f20427aa5e5852d42e22b8142c3072f1301352b9d62e1299bb116ae12901205c050453505ea9ae0e3ed7f8cc7ce56113150971272d76470eef35426d9d04090120df3897ed9fe8b6b7b2f4dd103aaaf7576fcd6d0fed10e3738d590ef369956f4b01208c5596b6154c876f743c4add787a6560d24e60a3e190c067467e49fc434571230020b1a4b02519d7db115e06a7c7346e48ff296b0c4fefa87ae2f09a24ac14bb935801202cfe3542b8fbfc208776090d85e18d8605092b48150e0c88771530dedbb8201d012026eb426d0dd12696a5f34c3f9846db7ef61b02538949267208a1c5f98015135d0120cb4007452a185157037a5706292e658af83218fa8ab5eb41960003a7ed0b7f360020d92e66f7a42cd7997723a04d4938b4f47296ed8ac832f0058d62601087311169012076728a60224ab83708dfb0e57c6cff573eb72cbfc4df1425c2c040e72451931b00201369b8bb11acf27ec087be8c6265a95324d5cdcf4565c88442f1fdfde77e8d580020ff8cc3edf957a1b4efa30d1d7a40c1168b0be7abe1479fe23a63bf97206b9a220120162eaaeb33ba49250cb179cb56e2f49872ed828e0ffbb21b46b4742508726b10002078fb3532b00579a11c172a307d1b1bd83b579afc68ce2652ef74164ca6fec033012002072df1a7a68b39435c874fba71318336d5ce00bb78ca8d061b7a36fa0fb33c0020d3d74792eb3b4a77bcbc9248afceddd10b0783e69fb8283d639e77479251f0380120ac068b169af9d6bd29eccd923c1d0142203e95036ceabc956a5c5fa6cfda7a430020292a127f52b011106f11ef7b39ee4781c9651139c4cbfb58b865184f3ded2d0600207a60f8a417fc25a68fe7be23e32cbb80e93f915e5511ce22bcad4a8dce7a434f0020bbb013dd260e0bee170a8bce60ac02af9f3802dd5f94fecaa153d6b81a291d420020a76d4a6a1894f407fa2de90f47459b3f9730bed36196bbf9dfcf9d70562e3c6c002048ac79e7be3cfdb40e1a185c5606c242c3a6d8ac5d4e9d553cf1bbe534e8ac5a0020422de1adb2c7ba61bd243f168ca72d7338fa4a43945047d591c5a4dbf825b12a002015a65be1ee046e09e80e5aa75861af989a46995f1beb668b669fe36424e982050020915e1759cf5a235b4450f461219741670fc54587b2f22ad1d3da4c1b9da6013500207d2e4672d0847255c97ac384aa7eba4d075d5d4926db2783a7a1e36e25a06f060020da2cd2ddc4937820f4676a118c05be099210ee718173a15f24eb23e45ac8d52b0020e5d6a9aa621584c3f27268081171fda4ee9a0ae5b731b88416268a15d344be160020b1fac014b181d844cecc065b92bbbc0d4b96ac4796ef331afdbd67d752f5a83600206642ae89204f976e5f4cf79a2e1302d56580ee9b6dd3b57bf70a29da76d9ac4a0020155aabb99e69d8c5ff38377d1a2781460cf8bdd1506d48f3cf27edea6e4b8d0f0100000000000000a801ad7aa5a5e8a1e49ed5764179f6950fed680dae74c5fc070dec2e391cc02e9551f33a2f14f92735e562dc658a5639279ddca3d5079a6d1242b2a588a9cbf44c0a00000000000000221be61fa938d881c9ec0a22e147aea9f3de72ae475cbc8aaeabe499568baf030000000000000000000000000000000000000000000000000000000000000000b5ef47d432eba38ec4e3560da8f7af5db2cd4bbb30bcc9cd16aa574ced0fc4d4000000000000000000000000000000000159a70200
                </div></div>:<div></div>}
            </div>:<div></div>}


            <div className="divider"></div>

            <Stepper
                step={3}
                onPrevClick={() => router.push("/groups")}
                onNextClick={_identity ? () => router.push("/proofs") : undefined}
            />
        </>
    )
}
